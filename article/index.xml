<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Memory Leak</title>
    <link>http://hgfischer.org/article/</link>
    <description>Recent content in Articles on Memory Leak</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright (c) 1997-2014, Herbert G. Fischer; all rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Feb 2015 21:26:44 +0000</lastBuildDate>
    <atom:link href="http://hgfischer.org/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manage multiple GOPATH dirs with ease</title>
      <link>http://hgfischer.org/article/managing-multiple-gopaths/</link>
      <pubDate>Thu, 05 Feb 2015 21:26:44 +0000</pubDate>
      
      <guid>http://hgfischer.org/article/managing-multiple-gopaths/</guid>
      <description>&lt;p&gt;Usually I have only one GOPATH in my machine and thats most Gophers out there recommend. However, sometimes we just
need to work on different projects with different versions of the same dependency, and it is out of question to update
them. We just don&amp;rsquo;t want to break something that is working, or mess with it.&lt;/p&gt;

&lt;p&gt;The quick solution is to point GOPATH to somewhere else, but everytime we have to swap the project we are working on,
we need to change it again.&lt;/p&gt;

&lt;p&gt;So I just came up with a simple solution that works on command line shell with Bash, and can be adapted to other
shells. Since I am a vim user, this should work well. I do not recommend this method for Sublime Text users or just any
other IDE that uses its own method for setting GOPATH. It will not work unless you load the Editor/IDE from the same
command line shell and it do not have its own way to setup GOPATH.&lt;/p&gt;

&lt;p&gt;The solution is simple. Just include the following snippet in your &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.bash_profile&lt;/code&gt;) and reload your
shell environment with &lt;code&gt;source ~/.bashrc&lt;/code&gt;. This snippet will create a shell function that will override the builtin
command &lt;code&gt;cd&lt;/code&gt; with a customized one that scans the entered directory, and every other above, for a file named &lt;code&gt;.gopath&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd () {
    builtin cd &amp;quot;$@&amp;quot;
    cdir=$PWD
    while [ &amp;quot;$cdir&amp;quot; != &amp;quot;/&amp;quot; ]; do
        if [ -e &amp;quot;$cdir/.gopath&amp;quot; ]; then
            export GOPATH=$cdir
            break
        fi
        cdir=$(dirname &amp;quot;$cdir&amp;quot;)
    done
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you just need to create a &lt;code&gt;.gopath&lt;/code&gt; file in every directory you want as your GOPATH and every time you enter this
directory, the redefined &lt;code&gt;cd&lt;/code&gt; function will set the GOPATH of your current environment to this directory.&lt;/p&gt;

&lt;p&gt;For example, let us create two directories, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, both with a subdirectory &lt;code&gt;src&lt;/code&gt; to fully illustrate the solution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go env GOPATH
/home/user/Go

$ mkdir -p ~/A/src &amp;amp;&amp;amp; touch ~/A/.gopath
$ mkdir -p ~/B/src &amp;amp;&amp;amp; touch ~/B/.gopath

$ cd ~/A/src
$ go env GOPATH
/home/user/A

$ cd ~/B/src
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, but now I want my old GOPATH back again&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/user/Go
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops&amp;hellip; We just need to touch .gopath here!!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch /home/user/Go/.gopath
$ cd .
$ go env GOPATH
/home/user/Go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Simple GOPATH management without external dependencies (eg. direnv)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse theme under Ubuntu</title>
      <link>http://hgfischer.org/article/eclipse-theme-under-ubuntu-unity/</link>
      <pubDate>Sat, 29 Oct 2011 11:41:00 +0000</pubDate>
      
      <guid>http://hgfischer.org/article/eclipse-theme-under-ubuntu-unity/</guid>
      <description>&lt;p&gt;Looks like there are a lot of complaints about Eclipse look-and-feel under Ubuntu Unity (10.10 and 11.04). The main
problem is that there are a few inconsistencies with default Eclipse coloring and Ubuntu system colors. Some interface
objects have low color contrast, like tooltips and selection lists.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found a few solutions on the web to this problem, but none solved the whole problem. Some suggested to edit a file
and force a color only to tooltips but this is counter-productive because tooltips are not the only object with color
problems in this situation.&lt;/p&gt;

&lt;p&gt;So, if you don&amp;rsquo;t mind having to change all colors in your Ubuntu, I&amp;rsquo;ve found out a simple solution to the problem.
Install gtk-chtheme, open it and choose a theme that works better with Unity theme. I&amp;rsquo;ve found out that the Human theme
works very well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gtk-chtheme
$ gtk-chtheme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See ya!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>