<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Memory Leak</title>
    <link>http://hgfischer.org/tags/golang/</link>
    <description>Recent content in Golang on Memory Leak</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright (c) 1997-2014, Herbert G. Fischer; all rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Feb 2015 21:26:44 +0000</lastBuildDate>
    <atom:link href="http://hgfischer.org/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manage multiple GOPATH dirs with ease</title>
      <link>http://hgfischer.org/article/managing-multiple-gopaths/</link>
      <pubDate>Thu, 05 Feb 2015 21:26:44 +0000</pubDate>
      
      <guid>http://hgfischer.org/article/managing-multiple-gopaths/</guid>
      <description>&lt;p&gt;Usually I have only one GOPATH in my machine and thats most Gophers out there recommend. However, sometimes we just
need to work on different projects with different versions of the same dependency, and it is out of question to update
them. We just don&amp;rsquo;t want to break something that is working, or mess with it.&lt;/p&gt;

&lt;p&gt;The quick solution is to point GOPATH to somewhere else, but everytime we have to swap the project we are working on,
we need to change it again.&lt;/p&gt;

&lt;p&gt;So I just came up with a simple solution that works on command line shell with Bash, and can be adapted to other
shells. Since I am a vim user, this should work well. I do not recommend this method for Sublime Text users or just any
other IDE that uses its own method for setting GOPATH. It will not work unless you load the Editor/IDE from the same
command line shell and it do not have its own way to setup GOPATH.&lt;/p&gt;

&lt;p&gt;The solution is simple. Just include the following snippet in your &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.bash_profile&lt;/code&gt;) and reload your
shell environment with &lt;code&gt;source ~/.bashrc&lt;/code&gt;. This snippet will create a shell function that will override the builtin
command &lt;code&gt;cd&lt;/code&gt; with a customized one that scans the entered directory, and every other above, for a file named &lt;code&gt;.gopath&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd () {
    builtin cd &amp;quot;$@&amp;quot;
    cdir=$PWD
    while [ &amp;quot;$cdir&amp;quot; != &amp;quot;/&amp;quot; ]; do
        if [ -e &amp;quot;$cdir/.gopath&amp;quot; ]; then
            export GOPATH=$cdir
            break
        fi
        cdir=$(dirname &amp;quot;$cdir&amp;quot;)
    done
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you just need to create a &lt;code&gt;.gopath&lt;/code&gt; file in every directory you want as your GOPATH and every time you enter this
directory, the redefined &lt;code&gt;cd&lt;/code&gt; function will set the GOPATH of your current environment to this directory.&lt;/p&gt;

&lt;p&gt;For example, let us create two directories, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, both with a subdirectory &lt;code&gt;src&lt;/code&gt; to fully illustrate the solution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go env GOPATH
/home/user/Go

$ mkdir -p ~/A/src &amp;amp;&amp;amp; touch ~/A/.gopath
$ mkdir -p ~/B/src &amp;amp;&amp;amp; touch ~/B/.gopath

$ cd ~/A/src
$ go env GOPATH
/home/user/A

$ cd ~/B/src
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, but now I want my old GOPATH back again&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/user/Go
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops&amp;hellip; We just need to touch .gopath here!!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch /home/user/Go/.gopath
$ cd .
$ go env GOPATH
/home/user/Go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Simple GOPATH management without external dependencies (eg. direnv)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go-OTP</title>
      <link>http://hgfischer.org/project/go-otp/</link>
      <pubDate>Thu, 20 Nov 2014 22:12:13 -0200</pubDate>
      
      <guid>http://hgfischer.org/project/go-otp/</guid>
      <description>&lt;p&gt;Package go-otp implements one-time-password generators used in 2-factor authentication systems like RSA-tokens.
Currently this supports both HOTP (RFC-4226) and TOTP (RFC-6238).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hgfischer/go-otp&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://godoc.org/github.com/hgfischer/go-otp&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Super Dump</title>
      <link>http://hgfischer.org/project/mysqlsuperdump/</link>
      <pubDate>Sat, 10 Aug 2013 15:19:00 +0000</pubDate>
      
      <guid>http://hgfischer.org/project/mysqlsuperdump/</guid>
      <description>&lt;p&gt;The following text is fiction based on a true story, but it can happen with lots of development teams over the world:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once upon a time there was a development team that liked to use dumps from the production database in their
development environments to have the same content and behavior of the production system in their machines.
To avoid security problems, the system administrator created a script to dump the production database, import in a
temporary database, then replace all sensitive data, like salts, passwords, customer names, emails, etc, for fake
data, then export a dump of this temporary database to a file that is the dump developers would use.
However this script was taking more time to run, day by day, and each day it was using more resources from the
server to run, until it exploded!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on this true story I&amp;rsquo;ve decided to make a program to solve this problem. The first version was made in Python 2.7
in a few hours, but I got trapped in text encoding problems of Python and MySQLdb library. So I&amp;rsquo;ve decided to rewrite
it using Go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hgfischer/mysqlsuperdump&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick bindings for Go</title>
      <link>http://hgfischer.org/project/go-imagemagick/</link>
      <pubDate>Sat, 10 Aug 2013 15:13:00 +0000</pubDate>
      
      <guid>http://hgfischer.org/project/go-imagemagick/</guid>
      <description>&lt;p&gt;A few months ago I&amp;rsquo;ve spent some days developing my first cgo binding and the chosen library was
&lt;a href=&#34;http://www.imagemagick.org/script/magick-wand.php&#34;&gt;ImageMagick&amp;rsquo;s MagickWand&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was an interesting experience. It&amp;rsquo;s relatively very easy to do such thing in Go. I&amp;rsquo;m still not using this binding in
production and I hope someone can try it. I took care to port some examples from C to Go also, so that should be easier
to start using it. And since ImageMagick is a huge library I was not able to test every function through the binding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gographics/imagick&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gowalker.org/github.com/gographics/imagick/imagick&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>