<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Memory Leak</title>
    <link>http://hgfischer.org/tags/bash/index.xml</link>
    <description>Recent content in Bash on Memory Leak</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright (c) 1997-2014, Herbert G. Fischer; all rights reserved.</copyright>
    <atom:link href="http://hgfischer.org/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manage multiple GOPATH dirs with ease</title>
      <link>http://hgfischer.org/article/managing-multiple-gopaths/</link>
      <pubDate>Thu, 05 Feb 2015 21:26:44 +0000</pubDate>
      
      <guid>http://hgfischer.org/article/managing-multiple-gopaths/</guid>
      <description>&lt;p&gt;Usually I have only one GOPATH in my machine and thats most Gophers out there recommend. However, sometimes we just
need to work on different projects with different versions of the same dependency, and it is out of question to update
them. We just don&amp;rsquo;t want to break something that is working, or mess with it.&lt;/p&gt;

&lt;p&gt;The quick solution is to point GOPATH to somewhere else, but everytime we have to swap the project we are working on,
we need to change it again.&lt;/p&gt;

&lt;p&gt;So I just came up with a simple solution that works on command line shell with Bash, and can be adapted to other
shells. Since I am a vim user, this should work well. I do not recommend this method for Sublime Text users or just any
other IDE that uses its own method for setting GOPATH. It will not work unless you load the Editor/IDE from the same
command line shell and it do not have its own way to setup GOPATH.&lt;/p&gt;

&lt;p&gt;The solution is simple. Just include the following snippet in your &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.bash_profile&lt;/code&gt;) and reload your
shell environment with &lt;code&gt;source ~/.bashrc&lt;/code&gt;. This snippet will create a shell function that will override the builtin
command &lt;code&gt;cd&lt;/code&gt; with a customized one that scans the entered directory, and every other above, for a file named &lt;code&gt;.gopath&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd () {
    builtin cd &amp;quot;$@&amp;quot;
    cdir=$PWD
    while [ &amp;quot;$cdir&amp;quot; != &amp;quot;/&amp;quot; ]; do
        if [ -e &amp;quot;$cdir/.gopath&amp;quot; ]; then
            export GOPATH=$cdir
            break
        fi
        cdir=$(dirname &amp;quot;$cdir&amp;quot;)
    done
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you just need to create a &lt;code&gt;.gopath&lt;/code&gt; file in every directory you want as your GOPATH and every time you enter this
directory, the redefined &lt;code&gt;cd&lt;/code&gt; function will set the GOPATH of your current environment to this directory.&lt;/p&gt;

&lt;p&gt;For example, let us create two directories, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, both with a subdirectory &lt;code&gt;src&lt;/code&gt; to fully illustrate the solution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go env GOPATH
/home/user/Go

$ mkdir -p ~/A/src &amp;amp;&amp;amp; touch ~/A/.gopath
$ mkdir -p ~/B/src &amp;amp;&amp;amp; touch ~/B/.gopath

$ cd ~/A/src
$ go env GOPATH
/home/user/A

$ cd ~/B/src
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, but now I want my old GOPATH back again&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/user/Go
$ go env GOPATH
/home/user/B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops&amp;hellip; We just need to touch .gopath here!!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch /home/user/Go/.gopath
$ cd .
$ go env GOPATH
/home/user/Go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Simple GOPATH management without external dependencies (eg. direnv)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script para embutir legendas em arquivos MKV</title>
      <link>http://hgfischer.org/artigo/script-embutir-legendas-mkv/</link>
      <pubDate>Thu, 15 Jul 2010 08:32:00 +0000</pubDate>
      
      <guid>http://hgfischer.org/artigo/script-embutir-legendas-mkv/</guid>
      <description>&lt;p&gt;Já faz algum tempo que o VLC para Mac não carrega as legendas automaticamente. Nem a última versão 1.1.0 faz isso mais.
E o Mkvtoolnix não é muito prático para utilizar com muitos arquivos, para juntar filmes e legendas. Foi por este
motivo que resolvi fazer um pequeno script que utiliza o mkvmerge que acompanha o próprio Mkvtoolnix para automatizar
a inclusão de legendas em filmes.&lt;/p&gt;

&lt;p&gt;Ele está bem simples e é recomendado para aqueles que tem algum conhecimento de shell scripts. Ele pode ser facilmente
utilizado em Linux também, possivelmente sem nenhuma necessidade de adaptação.&lt;/p&gt;

&lt;p&gt;O padrão de funcionamento é o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O script deve estar no mesmo diretório dos arquivos MKV e SRT.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Os arquivos MKV e suas respectivas legendas SRT devem ter o mesmo nome de arquivo (ignorando-se a extensão).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eu fiz o script para juntar legendas em português. Caso a legenda seja em outro idioma, ajuste o trecho do comando &lt;code&gt;--language 0:por&lt;/code&gt; para o idioma correto. Para saber qual o código correto do idioma, utilize o comando &lt;code&gt;mkvmerge --list-languages&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com pouca adaptação é possível melhorar o script para rodar de qualquer diretório, ser mais inteligente em achar
legendas, etc., mas o meu problema este aqui já foi suficiente para resolver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

export IFS=$&#39;\t\n&#39;
for mkv in `ls -1 *.mkv`
do
	bname=`basename -s &#39;.mkv&#39; $mkv`
	srt=`echo &amp;quot;${bname}.srt&amp;quot;`
	newmkv=`echo &amp;quot;${bname}.MERGED.mkv&amp;quot;`

	mkvmerge -o &amp;quot;$newmkv&amp;quot; &amp;quot;$mkv&amp;quot; \
		--sub-charset 0:ISO-8859-1 --language 0:por --default-track 0:yes &amp;quot;$srt&amp;quot; \
		--track-order 0:1,0:2,1:0
		
	mv &amp;quot;$mkv&amp;quot; ~/.Trash/
	mv &amp;quot;$srt&amp;quot; ~/.Trash/
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Separadores no Bash</title>
      <link>http://hgfischer.org/artigo/separadores-bash/</link>
      <pubDate>Mon, 02 Nov 2009 11:41:00 +0000</pubDate>
      
      <guid>http://hgfischer.org/artigo/separadores-bash/</guid>
      <description>&lt;p&gt;Quantas vezes já foi obrigado a refazer um script em outra linguagem quando se deparou com um &lt;em&gt;for&lt;/em&gt; que recebia valores
com espaços e não sabia como resolver isto diretamente no Bash?&lt;/p&gt;

&lt;p&gt;Eu mesmo já fiz isto algumas vezes. Mesmo quando sabia que era possível consertar o problema no próprio Bash eu acabava
partindo para o novo script pois encontrava um pouco de dificuldade de encontrar documentação sobre isto. O manual do
Bash não ajuda muito na forma correta de se configurar a variável IFS.&lt;/p&gt;

&lt;p&gt;IFS (Internal Field Separator) é uma variável que permite configurar quais são os caracteres que o Bash considera serem
separadores de campos. E é com o IFS que o loop for sabe separar os itens dentro de uma string ou dentre várias linhas.&lt;/p&gt;

&lt;p&gt;O IFS padrão é configurado para separar campos com espaços, tabulações e linhas.&lt;/p&gt;

&lt;p&gt;Para alterar o valor do IFS para não separar campos com espaços, basta utilizar o comando abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export IFS=$&#39;\t\n&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora quando quiser efetuar alguma tarefa numa lista de arquivos que tem espaços em seu nome, não terá problemas. Veja
o exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export IFS=$&#39;\t\n&#39;
for f in `ls -1`
do
    echo $f
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>